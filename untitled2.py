# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ign9hkNHfWMbBsbc2tv9SOKKCFKX4CsJ
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report

# Load the dataset
glass_data = pd.read_csv("glass.csv")

# Split dataset into features and target variable
X = glass_data.drop('Type', axis=1)  # Features
y = glass_data['Type']  # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create Na誰ve Bayes classifier
nb_classifier = GaussianNB()

# Train Na誰ve Bayes classifier
nb_classifier.fit(X_train, y_train)

# Predict the response for test dataset
y_pred = nb_classifier.predict(X_test)

# Model evaluation
# Score
accuracy = nb_classifier.score(X_test, y_test)
print("Accuracy:", accuracy)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Load the dataset
glass_data = pd.read_csv("glass.csv")

# Split dataset into features and target variable
X = glass_data.drop('Type', axis=1)  # Features
y = glass_data['Type']  # Target variable

# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create Linear SVM classifier
svm_classifier = SVC(kernel='linear')

# Train Linear SVM classifier
svm_classifier.fit(X_train, y_train)

# Predict the response for test dataset
y_pred = svm_classifier.predict(X_test)

# Model evaluation
# Score
accuracy = svm_classifier.score(X_test, y_test)
print("Accuracy:", accuracy)

# Classification Report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

"""Which algorithm you got better accuracy? Can you justify why?



To determine which algorithm has better accuracy, you would compare the accuracy scores obtained from the score() method for the Na誰ve Bayes and Linear SVM methods. The algorithm with the higher accuracy would be considered better in this context.

However, it's important to consider that the choice of algorithm might vary based on the specific characteristics of the dataset. In some cases, Na誰ve Bayes might perform better due to its simplicity and independence assumptions, while in other cases, SVM might perform better, especially when the decision boundary is nonlinear or when there's high dimensionality in the data. Therefore, it's essential to evaluate both algorithms and choose the one that performs better for the given dataset.
"""